AWSTemplateFormatVersion: '2010-09-09'
Description: 'Application Stack: ECR, ECS Cluster, ALB, and related resources'

Parameters:
  Stage1StackName:
    Type: String
    Description: The name of the Stage 1 stack
    Default: "insurance-api-network-stage1"

  Stage2StackName:
    Type: String
    Description: The name of the Stage 2 stack
    Default: "insurance-api-network-stage2"

  Stage4StackName:
    Type: String
    Description: The name of the Stage 4 stack
    Default: "insurance-api-data-auth-stage4"

  Stage5StackName:
    Type: String
    Description: The name of the Stage 5 stack
    Default: "insurance-api-ecr-stage5"

  DBCredentialsSecret:
    Type: String
    Description: ARN of the Secrets Manager secret containing database credentials
    Default: "arn:aws:secretsmanager:eu-west-1:860247412108:secret:test/InsuranceAPI/DBCredentials-gsmZfh"


  S3BucketName:
    Type: String
    Description: Name of the S3 bucket to store policy PDFs
    Default: insurance-files-tokio-marine

  Environment:
    Type: String
    AllowedValues: [ TEST, PRODUCTION]
    Default: TEST
    Description: The environment name


Resources:


  # Security Groups
  ALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for the ALB
      VpcId: 
        Fn::ImportValue: !Sub "${Stage1StackName}-VpcId"
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0

  ECSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for ECS tasks
      VpcId: 
        Fn::ImportValue: !Sub "${Stage1StackName}-VpcId"
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 8000
          ToPort: 8000
          SourceSecurityGroupId: !Ref ALBSecurityGroup
      # SecurityGroupEgress:
      #   - IpProtocol: tcp
      #     FromPort: 5432
      #     ToPort: 5432
      #     DestinationSecurityGroupId:
      #       Fn::ImportValue: !Sub "${Stage4StackName}-ECSSecurityGroupId"

  # ECS Cluster
  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: InsuranceAPICluster

  # Task Definition
  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: insurance-api-task
      Cpu: '256'
      Memory: '512'
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      ExecutionRoleArn: !Ref ECSTaskExecutionRole
      TaskRoleArn: !Ref ECSTaskRole
      ContainerDefinitions:
        - Name: insurance-api-container
          Image:
            Fn::ImportValue: !Sub "${Stage5StackName}-ECRRepositoryUri"
          Environment:
            - Name: DB_CREDENTIALS_SECRET
              Value: !Ref DBCredentialsSecret
            - Name: REGION
              Value: !Ref AWS::Region
            - Name: S3_BUCKET_NAME
              Value: 
                Fn::ImportValue: !Sub "${Stage4StackName}-S3BucketName"
            - Name: ENVIRONMENT
              Value: !Ref Environment
            # - Name: REDIS_HOST
            #   Value: 
            #     Fn::ImportValue: !Sub "${Stage4StackName}-ElastiCacheEndpoint"
            # - Name: REDIS_PORT
            #   Value: 
            #     Fn::ImportValue: !Sub "${Stage4StackName}-ElastiCachePort"
          PortMappings:
            - ContainerPort: 8000
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref CloudWatchLogsGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: ecs

  # Application Load Balancer
  ApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Scheme: internet-facing
      LoadBalancerAttributes:
        - Key: idle_timeout.timeout_seconds
          Value: '60'
      Subnets:
        - Fn::ImportValue: !Sub "${Stage1StackName}-PublicSubnet1Id"
        - Fn::ImportValue: !Sub "${Stage1StackName}-PublicSubnet2Id"
      SecurityGroups:
        - !Ref ALBSecurityGroup

  ALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref ALBTargetGroup
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: 80
      Protocol: HTTP

  # ALBListenerRule:
  #   Type: AWS::ElasticLoadBalancingV2::ListenerRule
  #   Properties:
  #     Actions:
  #       - Type: forward
  #         TargetGroupArn: !Ref ALBTargetGroup
  #     Conditions:
  #       - Field: path-pattern
  #         Values:
  #           - /v1/insurance/*
  #     ListenerArn: !Ref ALBListener
  #     Priority: 1

  ALBTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckPath: /v1/health/
      Name: insurance-api-tg
      Port: 8000
      Protocol: HTTP
      TargetType: ip
      VpcId: 
        Fn::ImportValue: !Sub "${Stage1StackName}-VpcId"

  # ECS Service
  ECSService:
    Type: AWS::ECS::Service
    DependsOn: ALBListener
    Properties:
      ServiceName: insurance-api-service
      Cluster: !Ref ECSCluster
      TaskDefinition: !Ref TaskDefinition
      DesiredCount: 2
      LaunchType: FARGATE
      # DeploymentConfiguration:
      #   MaximumPercent: 200
      #   MinimumHealthyPercent: 50
      #   DeploymentCircuitBreaker:
      #     Enable: true
      #     Rollback: false
      EnableExecuteCommand: true
      DeploymentController:
        Type: ECS
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: DISABLED
          Subnets:
            - Fn::ImportValue: !Sub "${Stage2StackName}-PrivateSubnet1Id"
            - Fn::ImportValue: !Sub "${Stage2StackName}-PrivateSubnet2Id"
          SecurityGroups:
            - !Ref ECSSecurityGroup
      LoadBalancers:
        - ContainerName: insurance-api-container
          ContainerPort: 8000
          TargetGroupArn: !Ref ALBTargetGroup

  # IAM Roles
  ECSTaskRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
      Policies:
      - PolicyName: ApplicationPermissions
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - secretsmanager:GetSecretValue
              Resource: 
                - !Ref DBCredentialsSecret
            - Effect: Allow
              Action:
                - s3:GetObject
              Resource: 
                -  Fn::ImportValue: !Sub "${Stage4StackName}-S3BucketName"
            - Effect: Allow
              Action:
                - elasticache:DescribeCacheClusters
              Resource: '*'

  ECSTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
      Policies:
      - PolicyName: CloudWatchLogsAccess
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - logs:CreateLogStream
                - logs:PutLogEvents
              Resource: !GetAtt CloudWatchLogsGroup.Arn

  # CloudWatch Logs
  CloudWatchLogsGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: /ecs/insurance-api
      RetentionInDays: 14


Outputs:
  ALBDNSName:
    Description: DNS name of the Application Load Balancer
    Value: !GetAtt ApplicationLoadBalancer.DNSName
    Export:
      Name: !Sub "${AWS::StackName}-ALBDNSName"

  ECSClusterName:
    Description: Name of the ECS Cluster
    Value: !Ref ECSCluster
    Export:
      Name: !Sub "${AWS::StackName}-ECSClusterName"

  ECSServiceName:
    Description: Name of the ECS Service
    Value: !GetAtt ECSService.Name
    Export:
      Name: !Sub "${AWS::StackName}-ECSServiceName"

  CloudWatchGroup:
    Description: ARN of the CloudWatch Log Group
    Value: !Ref CloudWatchLogsGroup
    Export:
      Name: !Sub "${AWS::StackName}-CloudWatchGroup"